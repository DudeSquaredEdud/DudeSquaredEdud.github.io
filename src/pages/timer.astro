---
import Layout from '../layouts/Layout.astro';
---

<Layout 
  title="4-Hour Focus Timer - Ashton Andrepont" 
  description="A retro-styled 4-hour focus timer with streak tracking and daily reset functionality"
>
  <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&display=swap" rel="preconnect">
  <link href="https://fonts.googleapis.com/css2?family=Share+Tech+Mono&display=swap" rel="preconnect">

  <!-- Timer Display Section -->
  <section class="timer-section">
    <div class="retro-clock">
      <div class="clock-face">
        <div class="time-display" id="timeDisplay">
          4:00:00
        </div>
        <div class="progress-ring">
          <svg class="progress-circle" width="280" height="280">
            <circle cx="140" cy="140" r="120" stroke="#333" stroke-width="6" fill="none"/>
            <circle 
              id="progressCircle"
              cx="140" cy="140" r="120" 
              stroke="#ff3300" 
              stroke-width="6" 
              fill="none"
              stroke-dasharray="754.0"
              stroke-dashoffset="754.0"
              stroke-linecap="round"
              transform="rotate(-90 140 140)"
            />
          </svg>
        </div>
      </div>
      
      <!-- Control Buttons -->
      <div class="timer-controls">
        <button id="startBtn" class="retro-btn primary">Start</button>
        <button id="pauseBtn" class="retro-btn secondary" disabled>Pause</button>
      </div>
      
      <!-- Timer Status -->
      <div class="timer-status">
        <div class="status-indicator" id="statusIndicator">Ready to Start</div>
        <div class="session-info">
          <span id="sessionDate"></span>
        </div>
      </div>
    </div>
  </section>

  <!-- Streak Counter Section -->
  <section class="streak-section">
    <div class="streak-counter">
      <h3>Focus Streak</h3>
      <div class="streak-display">
        <div class="streak-number" id="streakNumber">0</div>
        <div class="streak-label">Days</div>
      </div>
      <div class="streak-info">
        <div class="last-completed">
          Last completed: <span id="lastCompleted">Never</span>
        </div>
        <div class="today-progress">
          Today's progress: <span id="todayProgress">0%</span>
        </div>
      </div>
    </div>
  </section>


</Layout>

<style>
  /* Retro Timer Styling */
  .timer-section {
    display: flex;
    justify-content: center;
    margin: 2rem 0;
  }

  .retro-clock {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    background: 
      linear-gradient(90deg, 
        #8B4513 0%, #A0522D 2%, #8B4513 4%,
        #A0522D 6%, #8B4513 8%, #A0522D 10%,
        #8B4513 12%, #A0522D 14%, #8B4513 16%,
        #A0522D 18%, #8B4513 20%, #A0522D 22%,
        #8B4513 24%, #A0522D 26%, #8B4513 28%,
        #A0522D 30%, #8B4513 32%, #A0522D 34%,
        #8B4513 36%, #A0522D 38%, #8B4513 40%,
        #A0522D 42%, #8B4513 44%, #A0522D 46%,
        #8B4513 48%, #A0522D 50%, #8B4513 52%,
        #A0522D 54%, #8B4513 56%, #A0522D 58%,
        #8B4513 60%, #A0522D 62%, #8B4513 64%,
        #A0522D 66%, #8B4513 68%, #A0522D 70%,
        #8B4513 72%, #A0522D 74%, #8B4513 76%,
        #A0522D 78%, #8B4513 80%, #A0522D 82%,
        #8B4513 84%, #A0522D 86%, #8B4513 88%,
        #A0522D 90%, #8B4513 92%, #A0522D 94%,
        #8B4513 96%, #A0522D 98%, #8B4513 100%
      ),
      linear-gradient(180deg, rgba(255,255,255,0.1) 0%, transparent 50%, rgba(0,0,0,0.2) 100%);
    border-radius: 16px;
    padding: 2.5rem;
    box-shadow: 
      inset 0 3px 6px rgba(255, 235, 205, 0.3),
      inset 0 -3px 6px rgba(101, 67, 33, 0.8),
      inset 3px 0 6px rgba(139, 69, 19, 0.4),
      inset -3px 0 6px rgba(160, 82, 45, 0.4),
      0 8px 16px rgba(0, 0, 0, 0.3),
      0 0 30px rgba(139, 69, 19, 0.2);
    border: 2px solid #654321;
    position: relative;
  }
  
  .retro-clock::before {
    content: '';
    position: absolute;
    top: 8px;
    left: 8px;
    right: 8px;
    bottom: 8px;
    border: 1px solid rgba(160, 82, 45, 0.6);
    border-radius: 12px;
    pointer-events: none;
    box-shadow: inset 0 0 20px rgba(0, 0, 0, 0.3);
  }
  
  .retro-clock::after {
    content: '';
    position: absolute;
    top: 16px;
    left: 16px;
    right: 16px;
    bottom: 16px;
    background: linear-gradient(180deg, rgba(0,0,0,0.1) 0%, transparent 100%);
    border-radius: 8px;
    pointer-events: none;
  }

  .clock-face {
    position: relative;
    margin-bottom: 2rem;
  }

  .time-display {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-family: 'Share Tech Mono', 'Orbitron', monospace;
    font-size: 3.2rem;
    font-weight: 400;
    color: #ff4d4d;
    text-shadow: 
      0 0 3px #ff1a1a,
      0 0 6px #ff3333,
      0 0 12px #ff4d4d,
      0 0 18px #ff6666,
      inset 0 0 6px #ff0000;
    letter-spacing: 0.1em;
    z-index: 10;
    background: linear-gradient(to bottom, #0a0a0a 0%, #000000 50%, #0a0a0a 100%);
    padding: 0.6rem 1.2rem;
    border-radius: 6px;
    border: 2px solid #1a1a1a;
    box-shadow: 
      inset 0 0 8px rgba(0, 0, 0, 0.9),
      inset 0 2px 4px rgba(255, 255, 255, 0.1),
      0 0 20px rgba(255, 51, 51, 0.3);
    position: relative;
  }
  
  .time-display::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, transparent 0%, rgba(255, 51, 51, 0.1) 50%, transparent 100%);
    border-radius: 4px;
    pointer-events: none;
  }

  .progress-ring {
    position: relative;
    top: -12.5%;
}

  .progress-circle {
    transform: rotate(-90deg);
    filter: drop-shadow(0 0 6px rgba(255, 51, 0, 0.4));
  }

  .timer-controls {
    display: flex;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .retro-btn {
    padding: 0.8rem 2rem;
    font-family: 'Arial', sans-serif;
    font-size: 0.9rem;
    font-weight: 700;
    border: 2px solid;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s ease;
    text-transform: uppercase;
    letter-spacing: 0.08em;
    min-width: 120px;
    box-shadow: 
      inset 1px 1px 2px rgba(255, 255, 255, 0.2),
      inset -1px -1px 2px rgba(0, 0, 0, 0.3),
      0 2px 4px rgba(0, 0, 0, 0.3);
  }

  .retro-btn.primary {
    background: linear-gradient(145deg, #D2B48C, #CD853F);
    color: #2F1B14;
    border-color: #8B4513;
    text-shadow: 0 1px 0 rgba(255, 255, 230, 0.5);
  }

  .retro-btn.primary:hover:not(:disabled) {
    background: linear-gradient(145deg, #DDB892, #D2B48C);
    transform: translateY(1px);
  }

  .retro-btn.primary:active:not(:disabled) {
    box-shadow: 
      inset -1px -1px 2px rgba(255, 255, 230, 0.3),
      inset 1px 1px 2px rgba(139, 69, 19, 0.4);
    transform: translateY(2px);
  }

  .retro-btn.secondary {
    background: linear-gradient(145deg, #CD853F, #A0522D);
    color: #2F1B14;
    border-color: #654321;
    text-shadow: 0 1px 0 rgba(255, 255, 230, 0.3);
  }

  .retro-btn.secondary:hover:not(:disabled) {
    background: linear-gradient(145deg, #D2B48C, #CD853F);
    transform: translateY(1px);
  }

  .retro-btn.secondary:active:not(:disabled) {
    box-shadow: 
      inset -1px -1px 2px rgba(255, 255, 230, 0.2),
      inset 1px 1px 2px rgba(101, 67, 33, 0.4);
    transform: translateY(2px);
  }

  .retro-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    box-shadow: none;
  }

  .timer-status {
    text-align: center;
    color: #ffffff;
  }

  .status-indicator {
    font-size: 1rem;
    margin-bottom: 0.5rem;
    color: #ff3300;
    text-shadow: 0 0 8px rgba(255, 51, 0, 0.5);
    font-family: 'Arial', sans-serif;
    font-weight: 600;
  }

  .session-info {
    font-size: 0.9rem;
    font-family: var(--font-mono);
  }

  /* Streak Counter Styling */
  .streak-section {
    display: flex;
    justify-content: center;
    margin: 3rem 0;
  }

  .streak-counter {
    background: linear-gradient(145deg, #DEB887, #D2B48C);
    border: 2px solid #8B4513;
    border-radius: 12px;
    padding: 2rem;
    text-align: center;
    min-width: 300px;
    box-shadow: 
      inset 0 2px 4px rgba(255, 255, 230, 0.3),
      inset 0 -2px 4px rgba(139, 69, 19, 0.2),
      0 4px 8px rgba(0, 0, 0, 0.2);
  }

  .streak-counter h3 {
    margin-bottom: 1rem;
    color: #2F1B14;
    text-shadow: 0 1px 0 rgba(255, 255, 230, 0.5);
  }

  .streak-display {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .streak-number {
    font-size: 4rem;
    font-weight: 700;
    color: #8B4513;
    line-height: 1;
    font-family: 'Orbitron', monospace;
    text-shadow: 0 2px 0 rgba(255, 255, 230, 0.5);
  }

  .streak-label {
    font-size: 1.2rem;
    color: #2F1B14;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    text-shadow: 0 1px 0 rgba(255, 255, 230, 0.3);
  }

  .streak-info {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    font-size: 0.9rem;
    color: #2F1B14;
    text-shadow: 0 1px 0 rgba(255, 255, 230, 0.2);
  }



  /* Responsive Design */
  @media (max-width: 768px) {
    .retro-clock {
      padding: 1.5rem;
    }
    
    .time-display {
      font-size: 2rem;
    }
    
    .progress-circle {
      width: 240px;
      height: 240px;
    }
    
    .timer-controls {
      flex-direction: column;
      gap: 0.75rem;
    }
    
    .streak-counter {
      min-width: auto;
      padding: 1.5rem;
    }
    
    .streak-number {
      font-size: 3rem;
    }
  }
</style>

<script is:inline>
  class FocusTimer {
    constructor() {
      // Timer configuration
      this.TOTAL_SECONDS = 4 * 60 * 60; // 4 hours in seconds
      this.CIRCLE_CIRCUMFERENCE = 754.0; // 2 * Ï€ * 120
      
      // Timer state
      this.timeRemaining = this.TOTAL_SECONDS;
      this.isRunning = false;
      this.isPaused = false;
      this.timerInterval = null;
      this.startTime = null;
      this.pausedTime = 0;
      this.pauseStartTime = null;
      this.streak = 0;
      this.lastCompletedDate = null;
      
      // DOM elements
      this.timeDisplay = document.getElementById('timeDisplay');
      this.progressCircle = document.getElementById('progressCircle');
      this.statusIndicator = document.getElementById('statusIndicator');
      this.sessionDate = document.getElementById('sessionDate');
      this.streakNumber = document.getElementById('streakNumber');
      this.lastCompleted = document.getElementById('lastCompleted');
      this.todayProgress = document.getElementById('todayProgress');
      
      this.startBtn = document.getElementById('startBtn');
      this.pauseBtn = document.getElementById('pauseBtn');
      
      // Bind event listeners
      this.bindEvents();
      
      // Initialize timer
      this.init();
    }
    
    init() {
      this.checkDailyReset();
      this.loadTimerState();
      this.loadStreakData();
      this.updateDisplay();
      this.updateSessionDate();
    }
    
    bindEvents() {
      this.startBtn.addEventListener('click', () => this.start());
      this.pauseBtn.addEventListener('click', () => this.pause());
      
      // Save state when page is closed
      window.addEventListener('beforeunload', () => this.saveTimerState());
      
      // Handle visibility change (tab switching)
      document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'visible' && this.isRunning) {
          this.syncTime();
        }
      });
    }
    
    checkDailyReset() {
      const today = new Date().toDateString();
      const lastSessionDate = localStorage.getItem('focusTimer_lastSession');
      
      if (lastSessionDate !== today) {
        // New day - reset timer but check streak
        const yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        
        if (lastSessionDate !== yesterday.toDateString()) {
          // Missed a day - reset streak
          this.resetStreak();
        }
        
        // Reset timer for new day
        this.resetDailyTimer();
        localStorage.setItem('focusTimer_lastSession', today);
      }
    }
    
    resetDailyTimer() {
      this.timeRemaining = this.TOTAL_SECONDS;
      this.isRunning = false;
      this.isPaused = false;
      this.startTime = null;
      this.pausedTime = 0;
      localStorage.removeItem('focusTimer_timeRemaining');
      localStorage.removeItem('focusTimer_startTime');
      localStorage.removeItem('focusTimer_pausedTime');
      localStorage.removeItem('focusTimer_isRunning');
    }
    
    loadTimerState() {
      const savedTimeRemaining = localStorage.getItem('focusTimer_timeRemaining');
      const savedStartTime = localStorage.getItem('focusTimer_startTime');
      const savedPausedTime = localStorage.getItem('focusTimer_pausedTime');
      const savedIsRunning = localStorage.getItem('focusTimer_isRunning') === 'true';
      
      if (savedTimeRemaining !== null) {
        this.timeRemaining = parseInt(savedTimeRemaining);
      }
      
      if (savedStartTime && savedIsRunning) {
        this.startTime = parseInt(savedStartTime);
        this.pausedTime = savedPausedTime ? parseInt(savedPausedTime) : 0;
        this.isRunning = true;
        this.syncTime();
        this.startTimer();
      } else if (savedPausedTime && !savedIsRunning) {
        this.pausedTime = parseInt(savedPausedTime);
        this.isPaused = true;
      }
    }
    
    syncTime() {
      if (this.isRunning && this.startTime) {
        const now = Date.now();
        const elapsed = Math.floor((now - this.startTime - this.pausedTime) / 1000);
        this.timeRemaining = Math.max(0, this.TOTAL_SECONDS - elapsed);
        
        if (this.timeRemaining <= 0) {
          this.complete();
        }
      }
    }
    
    loadStreakData() {
      const streak = localStorage.getItem('focusTimer_streak');
      const lastCompleted = localStorage.getItem('focusTimer_lastCompleted');
      
      this.streak = streak ? parseInt(streak) : 0;
      this.lastCompletedDate = lastCompleted || null;
    }
    
    saveTimerState() {
      localStorage.setItem('focusTimer_timeRemaining', this.timeRemaining.toString());
      localStorage.setItem('focusTimer_isRunning', this.isRunning.toString());
      
      if (this.startTime) {
        localStorage.setItem('focusTimer_startTime', this.startTime.toString());
      }
      
      if (this.isPaused) {
        localStorage.setItem('focusTimer_pausedTime', this.pausedTime.toString());
      }
    }
    
    start() {
      if (!this.isRunning) {
        this.isRunning = true;
        this.isPaused = false;
        
        if (!this.startTime) {
          this.startTime = Date.now();
          this.pausedTime = 0;
        } else {
          // Resuming from pause
          this.pausedTime += Date.now() - this.pauseStartTime;
        }
        
        this.startTimer();
      }
    }
    
    pause() {
      if (this.isRunning) {
        this.isRunning = false;
        this.isPaused = true;
        this.pauseStartTime = Date.now();
        this.stopTimer();
      }
    }
    
    reset() {
      this.isRunning = false;
      this.isPaused = false;
      this.timeRemaining = this.TOTAL_SECONDS;
      this.startTime = null;
      this.pausedTime = 0;
      this.stopTimer();
      this.updateDisplay();
      this.saveTimerState();
    }
    
    startTimer() {
      this.stopTimer(); // Clear any existing interval
      
      this.timerInterval = setInterval(() => {
        if (this.timeRemaining > 0) {
          this.timeRemaining--;
          this.updateDisplay();
        } else {
          this.complete();
        }
      }, 1000);
      
      this.updateDisplay();
    }
    
    stopTimer() {
      if (this.timerInterval) {
        clearInterval(this.timerInterval);
        this.timerInterval = null;
      }
      this.updateDisplay();
    }
    
    complete() {
      this.isRunning = false;
      this.isPaused = false;
      this.timeRemaining = 0;
      this.stopTimer();
      
      // Update streak
      this.streak++;
      this.lastCompletedDate = new Date().toDateString();
      localStorage.setItem('focusTimer_streak', this.streak.toString());
      localStorage.setItem('focusTimer_lastCompleted', this.lastCompletedDate);
      
      // Show completion
      this.statusIndicator.textContent = 'Session Complete!';
      this.statusIndicator.style.color = '#ff3300';
      
      this.updateDisplay();
      this.saveTimerState();
      
      // Optional: Show notification
      this.showCompletionNotification();
    }
    
    resetStreak() {
      this.streak = 0;
      localStorage.setItem('focusTimer_streak', '0');
    }
    
    showCompletionNotification() {
      if ('Notification' in window && Notification.permission === 'granted') {
        new Notification('Focus Session Complete!', {
          body: `Congratulations! You've completed your 4-hour focus session. Streak: ${this.streak} days`,
          icon: '/favicon.svg'
        });
      }
    }
    
    updateDisplay() {
      // Update time display
      const hours = Math.floor(this.timeRemaining / 3600);
      const minutes = Math.floor((this.timeRemaining % 3600) / 60);
      const seconds = this.timeRemaining % 60;
      
      this.timeDisplay.textContent = 
        `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
      
      // Update progress circle
      const progress = (this.TOTAL_SECONDS - this.timeRemaining) / this.TOTAL_SECONDS;
      const offset = this.CIRCLE_CIRCUMFERENCE - (progress * this.CIRCLE_CIRCUMFERENCE);
      this.progressCircle.style.strokeDashoffset = offset;
      
      // Update status
      if (this.timeRemaining === 0) {
        this.statusIndicator.textContent = 'Session Complete!';
        this.statusIndicator.style.color = '#ff3300';
      } else if (this.isRunning) {
        this.statusIndicator.textContent = 'Focus Time Active';
        this.statusIndicator.style.color = '#fff';
      } else if (this.isPaused) {
        this.statusIndicator.textContent = 'Paused';
        this.statusIndicator.style.color = '#ff9500';
      } else {
        this.statusIndicator.textContent = 'Ready to Start';
        this.statusIndicator.style.color = '#afa;';
      }
      
      // Update button states
      this.startBtn.disabled = this.isRunning || this.timeRemaining === 0;
      this.pauseBtn.disabled = !this.isRunning;
      
      // Update streak display
      this.streakNumber.textContent = this.streak;
      this.lastCompleted.textContent = this.lastCompletedDate || 'Never';
      
      // Update today's progress
      const todayProgressPercent = Math.round(((this.TOTAL_SECONDS - this.timeRemaining) / this.TOTAL_SECONDS) * 100);
      this.todayProgress.textContent = `${todayProgressPercent}%`;
    }
    
    updateSessionDate() {
      const today = new Date();
      this.sessionDate.textContent = today.toLocaleDateString('en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    }
  }
  
  // Initialize timer when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const timer = new FocusTimer();
    
    // Request notification permission
    if ('Notification' in window && Notification.permission === 'default') {
      Notification.requestPermission();
    }
  });
</script>
